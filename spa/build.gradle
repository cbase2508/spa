apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
//apply plugin: 'jetty' //too old, Jetty6, use gretty
apply plugin: 'org.springframework.boot'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'idea'
//apply plugin: 'jacoco' //code coverage

/**
* setup for frontend
**/
apply plugin: "com.moowork.node"

//test by dong2
//def springVersion = "4.2.4.RELEASE"
def jdkVersion = 1.8
def junitVersion = "4.12"
def logbackVersion = "1.2.3"
def jclOverSlf4jVersion = "1.7.14"
def jstlVersion = "1.2"
def hamcrestVersion = "1.3"
def servletApiVersion = "3.1"
def springBootStartVersion = "1.5.9.RELEASE"

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

/*task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}*/

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

dependencies {

    compile 'org.slf4j:jcl-over-slf4j:' + jclOverSlf4jVersion
	compile 'ch.qos.logback:logback-classic:' + logbackVersion
		compile 'javax.servlet:jstl:' + jstlVersion
	
    //compile 'org.springframework:spring-webmvc:' +springVersion
    compile 'org.springframework.boot:spring-boot-starter-web:' + springBootStartVersion
	testCompile 'org.springframework.boot:spring-boot-starter-test:' + springBootStartVersion 
		compile group: 'org.springframework.security', name: 'spring-security-taglibs', version: '4.2.5.RELEASE'
	
}
 
/*
 * For tasks related to buildscript.
 *
 */
buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:' +"1.5.9.RELEASE"
  	classpath 'org.akhikhl.gretty:gretty:+'
    classpath "org.hidetake:gradle-ssh-plugin:2.7.0"
    classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
  }
  
  ext {
        querydslVersion    = "4.1.4"
        metaModelsSourcesDir = file("querymodels")   
  }
}

configurations {
    querydslapt
}

sourceSets {
    main {
        java {
            srcDir metaModelsSourcesDir
        }
    }
}

//https://stackoverflow.com/questions/47023874/gradle-with-querydsl-4-1-4-intellij
task createQuerymodels(type: JavaCompile, group: 'build') {
    
    destinationDir = metaModelsSourcesDir

    doFirst {
        delete destinationDir;
        destinationDir.mkdirs();
    }

    classpath = configurations.compile + configurations.querydslapt

    source = sourceSets.main.java
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor",
            "-s", destinationDir
    ]
}

task cleanQuerymodels(group: 'clean') {
    
    delete metaModelsSourcesDir;
 
}

//remove query models during clean
//clean.dependsOn cleanQuerymodels

//create query models before others. 
//compileJava.dependsOn createQuerymodels

/*
 * Gretty
 */
gretty {

  httpEnabled = true
  httpsEnabled = true
  
  //httpPort = 8080
  contextPath = 'combinations'
  servletContainer = 'jetty9'
  
  //add MaxPerSize jvm argument to resolve OutOfMemoryError: PermGen space Exception 
  jvmArgs = ['-Xmx1024M', '-XX:PermSize=512M', '-XX:MaxPermSize=1024M']
  
  debugPort = 5005      // execute "gradle tomcatStartDebug" to debug on tomcat, and use "remote java application" on eclipse
  debugSuspend = false   //
}

/*
 * deploy a war file remotely with ssh
 *
 */

/*
task deploy (dependsOn: war) << {
  ssh.run {
    session(remotes.tomcatServer) {
      put from: 'build/libs/combinations.war', into: './'  //'/usr/local/tomcat/webapps'
      //execute 'sudo service tomcat restart'
    }
  }
}
*/

/*
* For webpack
*
*/
import com.moowork.gradle.node.task.NodeTask
 
task webpack(type: NodeTask, dependsOn: 'npmInstall') {
  script = project.file('node_modules/.bin/webpack')
}
//processResources.dependsOn 'webpack'


/*
 *For Eclipse IDE only
 *
 */
eclipse {

  wtp {
    component {
      
      //define context path, default to project folder name
      contextPath = 'combinations'
      
    }
    
  }
}

/*
jacoco {
    toolVersion = "0.7.5+"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
*/

test {
    testLogging {
        // Show that tests are run in the command-line output
        //showStandardStreams = true
        //exceptionFormat = 'full'
        events "standardOut", "started", "passed", "skipped", "failed"
    }
}

